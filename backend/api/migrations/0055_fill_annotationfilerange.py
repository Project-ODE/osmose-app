# Generated by Django 3.2.25 on 2024-10-01 15:04

from django.db import migrations

from backend.api.models import (
    AnnotationFileRange,
    AnnotationCampaign,
    DatasetFile,
    AnnotationTask,
)


def fill_annotation_file_range(apps, schema_editor):
    file_range: AnnotationFileRange.__class__ = apps.get_model(
        "api", "AnnotationFileRange"
    )
    campaign_model: AnnotationCampaign.__class__ = apps.get_model(
        "api", "AnnotationCampaign"
    )

    ranges = []

    for campaign in campaign_model.objects.all():
        all_files = (
            DatasetFile.objects.filter(
                dataset_id__in=campaign.datasets.values_list("id", flat=True)
            )
            .order_by("start", "id")
            .values_list("id", flat=True)
        )
        for user in campaign.annotators.distinct():
            user_all_files = campaign.tasks.filter(annotator_id=user.id).values_list(
                "dataset_file_id", flat=True
            )
            if all_files.count() == user_all_files.count():
                ranges.append(
                    file_range(
                        first_file_index=0,
                        last_file_index=all_files.count() - 1,
                        annotation_campaign=campaign,
                        annotator=user,
                    )
                )
                continue
            first_index = None
            last_index = None
            for index, file in enumerate(all_files):
                if file in user_all_files:
                    if first_index is None:
                        first_index = index
                    last_index = index
                else:
                    if first_index is not None:
                        ranges.append(
                            file_range(
                                first_file_index=first_index,
                                last_file_index=last_index,
                                annotation_campaign=campaign,
                                annotator=user,
                            )
                        )
                        first_index = None
                        last_index = None
            if first_index is not None:
                ranges.append(
                    file_range(
                        first_file_index=first_index,
                        last_file_index=last_index,
                        annotation_campaign=campaign,
                        annotator=user,
                    )
                )
    file_range.objects.bulk_create(ranges)


def fill_annotation_task(apps, schema_editor):
    task: AnnotationTask.__class__ = apps.get_model("api", "AnnotationTask")
    campaign_model: AnnotationCampaign.__class__ = apps.get_model(
        "api", "AnnotationCampaign"
    )

    tasks = []
    campaign: AnnotationCampaign
    for campaign in campaign_model.objects.all():
        if campaign.annotation_file_ranges.count() == 0:
            continue
        all_files = (
            DatasetFile.objects.filter(
                dataset_id__in=campaign.datasets.values_list("id", flat=True)
            )
            .order_by("start", "id")
            .values_list("id", flat=True)
        )
        for annotation_range in campaign.annotation_file_ranges.all():
            if (
                campaign.tasks.filter(
                    annotator_id=annotation_range.annotator_id
                ).count()
                == annotation_range.last_file_index
                - annotation_range.first_file_index
                + 1
            ):
                continue
            for index, file_id in enumerate(all_files):
                if index < annotation_range.first_file_index:
                    continue
                if index > annotation_range.last_file_index:
                    continue
                if task.objects.filter(
                    annotator_id=annotation_range.annotator_id,
                    annotation_campaign_id=campaign.id,
                    dataset_file_id=file_id,
                ).exists():
                    continue
                tasks.append(
                    task(
                        annotator_id=annotation_range.annotator_id,
                        annotation_campaign_id=campaign.id,
                        dataset_file_id=file_id,
                        status=AnnotationTask.Status.CREATED,
                    )
                )
    task.objects.bulk_create(tasks)


class Migration(migrations.Migration):
    dependencies = [
        ("api", "0054_annotationfilerange"),
    ]

    operations = [
        migrations.RunPython(fill_annotation_file_range, fill_annotation_task)
    ]
